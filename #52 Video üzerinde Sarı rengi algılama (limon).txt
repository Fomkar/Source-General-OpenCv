#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/core/core.hpp"
#include <iostream>

using namespace std;
using namespace cv;

Mat hsv, imthresh, im;
Mat video;


int iLowH = 0;
int iHighH = 179;

int iLowS = 54;
int iHighS = 220;

int iLowV = 103;
int iHighV = 255;



int main()
{

	VideoCapture vid("video4.mp4");





	while (true) {

		vid.read(video);
		resize(video, video, Size(1000, 1000));

		cvtColor(video, hsv, CV_BGR2HSV);
		inRange(hsv, Scalar(iLowH, iLowS, iLowV), Scalar(iHighH, iHighS, iHighV), imthresh);

		erode(imthresh, imthresh, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
		dilate(imthresh, imthresh, getStructuringElement(MORPH_ELLIPSE, Size(7, 7)));

		dilate(imthresh, imthresh, getStructuringElement(MORPH_ELLIPSE, Size(7, 7)));
		erode(imthresh, imthresh, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));

		vector<vector<Point> > contours;
		vector<Vec4i>hierarchy;

		findContours(imthresh, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));

		vector<Moments> mu(contours.size());

		for (int i = 0; i < contours.size(); i++)
		{
			mu[i] = moments(contours[i]);
		}
		vector<Point2f> mc(contours.size());

		for (int i = 0; i < contours.size(); i++)
		{
			float mcenterx = mu[i].m10 / mu[i].m00;
			float mcentery = mu[i].m01 / mu[i].m00;
			mc[i] = Point2f((mcenterx), (mcentery));

			drawContours(video, contours, i, Scalar(255, 0, 0), 2, 8);
			circle(video, Point(mcenterx, mcentery), 3, Scalar(0, 0, 255), 3, LINE_AA, 0);
		}

		imshow("Video", video);
		imshow("Merkez", imthresh);
		waitKey(100);

		if (waitKey(30) == 27) break;
	}



	return 0;
}